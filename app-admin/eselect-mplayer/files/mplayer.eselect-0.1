# -*-eselect-*-  vim: ft=eselect
# Distributed under the public domain

DESCRIPTION="Manage mplayer symlink"
MAINTAINER="inemajo@fsfe.org"
VERSION="0.1"

# DEFAULT_MPLAYER_PATH=$(which mplayer)||$(which mplayer1)||$(which mplayer2)||""
# [ -n "$DEFAULT_MPLAYER_PATH"] \
# 	&& SYMLINK_PATH=$(dirname "$DEFAULT_MPLAYER_PATH")/mplayer \
# 	|| SYMLINK_PATH=/usr/bin

# SYMLINK_TARGETS=( mplayer1 mplayer2 )

# inherit bin-symlink

MPLAYER_DIRNAME=$(which mplayer)||$(which mplayer1)||$(which mplayer2)||"/usr/bin"
MPLAYER_DIRNAME=$(dirname "$MPLAYER_DIRNAME")

# find a list of kernel symlink targets
find_targets() {
	[ -e $MPLAYER_DIRNAME/mplayer1 ] && echo $MPLAYER_DIRNAME/mplayer1
	[ -e $MPLAYER_DIRNAME/mplayer2 ] && echo $MPLAYER_DIRNAME/mplayer2
}

# remove the kernel symlink
remove_symlink() {
	rm "$MPLAYER_DIRNAME/mplayer"
}

# set the kernel symlink
set_symlink() {
	local target=$1

	if is_number "${target}"; then
		local targets=( $(find_targets) )
		target=${targets[target-1]}
	fi

	if [[ -z ${target} ]]; then
		die -q "Target \"$1\" doesn't appear to be valid!"
	else
		echo Set ${target} to $MPLAYER_DIRNAME/mplayer
		ln -s "${target}" "$MPLAYER_DIRNAME/mplayer"
	fi
}

### show action ###

describe_show() {
	echo "Show the current mplayer symlink"
}

do_show() {
	write_list_start "Current mplayer symlink:"
#	local mplayer=$(ls -l /usr/bin/mplayer | awk '{print $9" "$10" "$11}')
	if [[ -f "$MPLAYER_DIRNAME/mplayer" ]]; then
		local mplayer=$(canonicalise "$MPLAYER_DIRNAME/mplayer")
		write_kv_list_entry "${mplayer%/}" ""
	else
		write_kv_list_entry "(unset)" ""
	fi
}

### list action ###

describe_list() {
	echo "List available mplayer symlink targets"
}

do_list() {
	local i targets=( $(find_targets) )
	local mplayer=$( ls -l /usr/bin/mplayer | awk '{print $11}' )

	write_list_start "Available mplayer symlink targets:"
	for (( i = 0; i < ${#targets[@]}; i++ )); do
		[[ ${targets[i]} = ${mplayer} ]] && targets[i]=$(highlight_marker "${targets[i]}")
	done
	write_numbered_list -m "(none found)" "${targets[@]}"
}

### set action ###

describe_set() {
	echo "Set a mplayer symlink target"
}

describe_set_parameters() {
	echo "<target>"
}

describe_set_options() {
	echo "target : Target name or number (from 'list' action)"
}

do_set() {
	[[ -z $1 ]] && die -q "You didn't tell me what to set the symlink to"
	[[ $# -gt 1 ]] && die -q "Too many parameters"

	mplayer="$MPLAYER_DIRNAME/mplayer"
	if [[ -L ${mplayer} ]]; then
		# existing symlink
		remove_symlink || die -q "Couldn't remove existing symlink"
		set_symlink "$1" || die -q "Couldn't set a new symlink"
	elif [[ -e ${mplayer} ]]; then
		# we have something strange
		echo "${mplayer} exists but is not a symlink"
		echo "Considering it's mplayer1 so move it: "
		mv -i -v ${mplayer} ${mplayer}1 || die -q "Couldn't move mplayer"
		set_symlink "$1" || die -q "Couldn't set a new symlink"
	else
		set_symlink "$1" || die -q "Couldn't set a new symlink"
	fi
}
